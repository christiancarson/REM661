---
title: "Assignment 5 - Prawns"
output: github_document
author: "Christian Carson"
date: "03/25/2024"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r setup}
#total number of time steps, 3 months each covering 10 years. So (10*12)/3 = 40
nT <- 40
#create a function that will model the prawn population over time; MR is the mortality rate due to release after being caught, E is the fishing effort in terms of traps deployed
PrawnModel <- function(MR=0, E=400){
#base of the Beverton-holt model, where alpha is the maximum number of prawns that can be caught
  alpha <- 1000
#beta is the rate at which the number of prawns caught increases with effort
  beta <- 1e-3
#q is the catchability of the prawns
  q <- 0.001
  
  # assume 3-month time-steps
#p represents the transition rates between each life stage
  p <- c( 1/5, 1/4, 1/3, 1, 1/2 )
#s represents the survival rates of each life stage, the last is 0 because the female prawns die after spawning
  S <- c( 0.5, 0.55, 0.6, 0.6, 0.6, 0.0 )
#N0 represents the initial number of prawns in each life stage,the last is 0 because the female prawns die after spawning
  N0 <- c( 1000000, 175000, 39000, 10000, 5000, 0 )
#seL represents the selectivity of the prawns at each life stage, or how likely they are to be caught
  sel <- c( 0, 0.1, 0.3, 0.7, 1, 0.8 )
#prel represents the probability of a prawn being released after being caught, which modifies the survival rates below
  prel <- c( 0, 0, 0, 0, 1, 0 )
#S represents the survival rates of each life stage. S is a product of 1 minus the catchabiliy multiplied by the effort, the selectivity, 1 minues the probability of being released, and plus the probability of mortality due to release
  S <- S * (1- q * E * sel * ((1 - prel) + prel*MR ))

#setup the matrices to store the results for each time step
  Nt <- matrix(nrow=nT,ncol=6)
  Ct <- matrix(nrow=nT,ncol=6)
#initialize the first row of the matrices with the initial values from N0
  Nt[1,] <- N0
#calculate the intial catch for the first time step based on the initial number of prawns, the catchability, the effort, and the selectivity
  Ct[1,] <- Nt[1,]*q*E*sel
Spawn <- vector("numeric", nT)
  SI <- vector("numeric", nT)  # Spawner Index
  
  # Initialize the spawning population and SI for the first time step
  Spawn[1] <- Nt[1,5] * S[5] * p[5]
  SI[1] <- Ct[1,5] / E

  # Model loop over nT time steps
  for (t in 2:nT) {
    Nt[t,1] <- alpha * Spawn[t-1] / (1 + beta * Spawn[t-1])  # Beverton-Holt recruitment for immature prawns
    
    for (stage in 2:6) {
      if (stage < 6) {
        Nt[t,stage] <- Nt[t-1,stage-1] * p[stage-1] * S[stage-1]  # Transitioning prawns to the next stage
      } else {
        Nt[t,stage] <- 0  # Females after releasing eggs, considered 100% mortality
      }
    }
    
    Ct[t, ] <- Nt[t, ] * q * E * sel  # Calculate catch for each stage
    Spawn[t] <- Nt[t,5] * S[5]  # Update spawning population
    SI[t] <- Ct[t,5] / E  # Update Spawner Index
  }

  # Phi calculation for the last time step
  Phi <- Spawn[nT] / Nt[nT,1]
  
  # Prepare output
  out <- list(Spawn = Spawn, SI = SI, Ct = Ct, Nt = Nt, Phi = Phi)
  return(out)
}

# Run the model and analyze the impact of varying MR on SPR
Phi0 <- PrawnModel(MR = 0, E = 0)$Phi

# Vary MR and calculate SPR
MR_values <- seq(0, 1, by = 0.01)
SPR_values <- numeric(length(MR_values))
SI_values <- numeric(length(MR_values))

for (i in seq_along(MR_values)) {
  MR <- MR_values[i]
  model_out <- PrawnModel(MR = MR, E = 400)
  PhiF <- model_out$Phi
  SPR_values[i] <- PhiF / Phi0
  SI_values[i] <- tail(model_out$SI, 1)
}

# Identify critical MR where SPR falls below 0.4
critical_MR <- MR_values[min(which(SPR_values < 0.4))]
critical_SI <- SI_values[min(which(SPR_values < 0.4))]

plot(MR_values, SPR_values, type="l", col="blue", ylim=c(0,1), xlab="Mortality Rate (MR)", ylab="SPR", main="SPR vs. MR")
abline(h=0.4, col="red", lty=2)  # Add a horizontal line at SPR = 0.4

# Plot SI vs. MR
plot(MR_values, SI_values, type="l", col="green", xlab="Mortality Rate (MR)", ylab="Spawner Index (SI)", main="SI vs. MR")

# Add a vertical line at the critical MR
abline(v=critical_MR, col="red", lty=2)
```

